#!/usr/bin/env python3
#coding=utf-8
#利用jinja2框架生成配置文件

import argparse
import os
import yaml

from jinja2 import Environment, FileSystemLoader

# command arguments
parser = argparse.ArgumentParser()
parser.add_argument(
        '-t', '--template',
        help = 'config template filenames',
        dest = 'templates',
        metavar = 'TEMPLATE',
        required = True,
        nargs = '*',
        )
parser.add_argument(
        '-r', '--root',
        help = 'root of config template',
        dest = 'root',
        metavar = 'DIRECTORY',
        required = True,
        )
parser.add_argument(
        '-e', '--exclude',
        help = 'exclude config template filenames',
        dest = 'exclude',
        metavar = 'FILE',
        default = [],
        nargs = '*',
    )

args = parser.parse_args()

# load data from yaml file
config = {}

for template in args.templates:
    _data = yaml.safe_load(open(template, 'r', encoding='utf-8'))
    config.update(_data)

# load jinja2 template
env = Environment(loader = FileSystemLoader(args.root, encoding='utf-8'), trim_blocks=True)

def generateFile(src, dest):
    '''
    根据模板文件生成结果
    @param src: 模板文件名
    @param dest: 目标文件名
    '''
    template = env.get_template(src)

    with open(dest, 'w') as f:
        print('# AUTO GENERATED BY JINJA2', file=f)
        print(template.render(config), file=f)

    print('[{}] jinja2 DONE'.format(src))

# find all j2 template file under ../
for root, dirs, files in os.walk(args.root):
    for filename in files:
        if filename in args.exclude: continue

        name, ext = os.path.splitext(filename)

        if ext != '.j2': continue

        # 模板文件名
        templateFilename = os.path.relpath(os.path.join(root, filename), args.root)
        # 新的文件名
        newFilename = os.path.join(root, name)

        generateFile(templateFilename, newFilename)
