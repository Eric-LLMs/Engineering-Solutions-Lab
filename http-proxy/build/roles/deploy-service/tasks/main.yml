# 部署服务
---

# 同步服务文件
- name: rsync service files to remote server
  synchronize:
    src: "{{ bin_path }}/"
    dest: "{{ deploy_path }}/bin"
    checksum: yes
    compress: yes
    rsync_opts:
    - "--ignore-errors"
    - "--exclude=.*"
    - "--delete-excluded"

# 生成动态配置
- name: generate conf/etcd.yml
  template:
    src: "{{ bin_path }}/{{ item }}.j2"
    dest: "{{ deploy_path }}/bin/{{ item }}"
  loop:
  - conf/etcd.yml
# 利用etcd生成服务配置
- name: generate dynamic config files by etcd-proxy
  shell: python3 etcd-proxy/etcd-proxy.py -c conf/etcd.yml
  args:
    chdir: "{{ path }}"
  vars:
    ansible_port: "{{ ssh_port }}"

# 安装 python 依赖
- name: install python requirements
  shell: pip3 install -r {{ path }}/bin/requirements.txt -i {{ pip_source }}
  vars:
    ansible_port: "{{ ssh_port }}"

# 配置supervisord
- name: set supervisord daemon config files
  template:
    src: "{{ item }}"
    dest: /root/supervisor/daemon/
  vars:
    ansible_port: "{{ ssh_port }}"
  loop:
  - etcd-supervisord.conf
  - service-supervisord.conf

# 重启service
- name: restart service by supervisord
  shell: supervisorctl -u {{ supervisor.username }} -p {{ supervisor.passwd }} -c /root/supervisor/supervisord.conf {{ item }}
  loop:
  - reread
  - update
  - restart etcd-proxy
  - restart {{ service_name }}
  vars:
    ansible_port: "{{ ssh_port }}"

# 部署 docker-entrypoint.sh 用于容器重启恢复服务
- name: deploy docker-entrypoint.sh
  copy:
    src: docker-entrypoint.sh
    dest: /root
  vars:
    ansible_port: "{{ ssh_port }}"
